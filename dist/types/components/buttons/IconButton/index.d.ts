export { styledIconButton as IconButton };
declare const styledIconButton: React.JSXElementConstructor<Omit<Pick<Pick<{
    classes: any;
    disabled: any;
    onClick: any;
    url: any;
    icon: any;
    overrideIcon: any;
    tooltipMessage: any;
    color: any;
    size: any;
    id: any;
    dataTestId: any;
    iconSize: any;
    reloadDocument?: boolean | undefined;
    replace?: boolean | undefined;
    target?: string | undefined;
    download?: boolean | undefined;
}, "replace" | "reloadDocument" | "target" | "download"> & Pick<PropTypes.InferProps<{
    size: PropTypes.Requireable<string>;
    classes: PropTypes.Validator<object>;
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    url: PropTypes.Requireable<string>;
    disabled: PropTypes.Requireable<boolean>;
    icon: PropTypes.Requireable<string>;
    color: PropTypes.Requireable<string>;
    overrideIcon: PropTypes.Requireable<any>;
    tooltipMessage: PropTypes.Validator<object>;
    id: PropTypes.Requireable<string>;
    dataTestId: PropTypes.Requireable<string>;
    iconSize: PropTypes.Requireable<string>;
    reloadDocument: PropTypes.Requireable<boolean>;
    replace: PropTypes.Requireable<boolean>;
    download: PropTypes.Requireable<boolean>;
    target: PropTypes.Requireable<string>;
}>, "size" | "onClick" | "id" | "dataTestId" | "disabled" | "url" | "icon" | "overrideIcon" | "color" | "iconSize" | PropTypes.RequiredKeys<{
    size: PropTypes.Requireable<string>;
    classes: PropTypes.Validator<object>;
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    url: PropTypes.Requireable<string>;
    disabled: PropTypes.Requireable<boolean>;
    icon: PropTypes.Requireable<string>;
    color: PropTypes.Requireable<string>;
    overrideIcon: PropTypes.Requireable<any>;
    tooltipMessage: PropTypes.Validator<object>;
    id: PropTypes.Requireable<string>;
    dataTestId: PropTypes.Requireable<string>;
    iconSize: PropTypes.Requireable<string>;
    reloadDocument: PropTypes.Requireable<boolean>;
    replace: PropTypes.Requireable<boolean>;
    download: PropTypes.Requireable<boolean>;
    target: PropTypes.Requireable<string>;
}>> & Pick<{
    classes: any;
    disabled: any;
    onClick: any;
    url: any;
    icon: any;
    overrideIcon: any;
    tooltipMessage: any;
    color: any;
    size: any;
    id: any;
    dataTestId: any;
    iconSize: any;
    reloadDocument?: boolean | undefined;
    replace?: boolean | undefined;
    target?: string | undefined;
    download?: boolean | undefined;
}, never>, PropTypes.RequiredKeys<{
    size: PropTypes.Requireable<string>;
    classes: PropTypes.Validator<object>;
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    url: PropTypes.Requireable<string>;
    disabled: PropTypes.Requireable<boolean>;
    icon: PropTypes.Requireable<string>;
    color: PropTypes.Requireable<string>;
    overrideIcon: PropTypes.Requireable<any>;
    tooltipMessage: PropTypes.Validator<object>;
    id: PropTypes.Requireable<string>;
    dataTestId: PropTypes.Requireable<string>;
    iconSize: PropTypes.Requireable<string>;
    reloadDocument: PropTypes.Requireable<boolean>;
    replace: PropTypes.Requireable<boolean>;
    download: PropTypes.Requireable<boolean>;
    target: PropTypes.Requireable<string>;
}>> & {
    size?: string | null | undefined;
    onClick?: ((...args: any[]) => any) | null | undefined;
    id?: string | null | undefined;
    dataTestId?: string | null | undefined;
    replace?: boolean | undefined;
    disabled?: boolean | null | undefined;
    url?: string | null | undefined;
    icon?: string | null | undefined;
    overrideIcon?: any;
    color?: string | null | undefined;
    iconSize?: string | null | undefined;
    reloadDocument?: boolean | undefined;
    target?: string | undefined;
    download?: boolean | undefined;
} & {}, "classes"> & import("@mui/styles").StyledComponentProps<string> & object>;
import PropTypes from "prop-types";
import React from "react";
