import { MutationFunction, QueryFunction, QueryKey, UseMutationOptions, UseMutationResult, UseQueryOptions, UseQueryResult } from 'react-query';
import { IntlMessage } from '../types/types';
import { SnackMutationDict, SnackQueryDict } from './types';
import { EventDispatcher } from '../snackbars/EventDispatcher';
/**
 *
 * @param openSnackBar: must be generated by useSnackBars higher in the tree
 * @param errorSnackBar
 * @param succesfullSnackBar
 * @returns
 */
export declare const makeApiHooks: (dispatcher: EventDispatcher, errorSnackBar?: (messageKey: any, messageObject: any, errorLog: any) => {
    messageKey: any;
    messageObject: any;
    options: {
        variant: string;
        persist: boolean;
    };
    errorLog: any;
    id: string;
}, succesfullSnackBar?: (messageKey: any, messageObject: any) => {
    messageKey: any;
    messageObject: any;
    options: {
        variant: string;
        persist: boolean;
    };
}) => {
    useSnackQuery: <QueryFnData = any, Error = unknown, Data = QueryFnData, QueryKeyExtended extends QueryKey = QueryKey>(queryArg: QueryKey | SnackQueryDict<QueryFnData, Data, QueryKeyExtended>, queryFn?: QueryFunction<QueryFnData>, snackErrorMsg?: IntlMessage | undefined, options?: UseQueryOptions<QueryFnData, Error, Data, QueryKeyExtended>, dispatchOnError?: boolean, ignoreErrorCodes?: number[]) => UseQueryResult<Data, Error>;
    useSnackMutation: <Data = unknown, Error = unknown, Variables = void, Context = unknown>(mutationArg: MutationFunction<Data, any> | SnackMutationDict<Data, Error, Variables, Context>, snackSuccessMessage?: IntlMessage, snackErrorMsg?: IntlMessage, invalidateQueryKey?: QueryKey | undefined, options?: Omit<UseMutationOptions<Data, Error, Variables, Context>, "mutationFn"> | undefined, showSucessSnackBar?: boolean, ignoreErrorCodes?: number[], successSnackBar?: (msg: IntlMessage, data: any) => {
        messageKey: string;
        messageObject: any;
        options: {
            variant: string;
            persist: boolean;
        };
    }) => UseMutationResult<Data, Error, Variables, Context>;
    useSnackQueries: <QueryFnData>(queries: {
        queryKey: QueryKey;
        queryFn: QueryFunction<QueryFnData>;
        snackErrorMsg?: IntlMessage;
        options: UseQueryOptions;
        dispatchOnError?: boolean;
    }[]) => Array<UseQueryResult<unknown, unknown>>;
    useAbortController: () => AbortController | Record<string, never>;
};
